configfile: "snake_conf.yaml"

email = config["email"]

localrules:


def read_files():
    samples = {}
    with open(config["input_files"], "r") as f:
        for line in f:
            if line.startswith("#"):
                continue
            uniq_id, sample_id, path = line.rstrip().split("\t")
            samples[uniq_id] = [sample_id, path]
    return samples


SAMPLES = read_files()

OUT_DIR = config["out_dir"]
SCRATCH_DIR = config["scratch_dir"]
TEMP_DIR = config["temp_dir"]

PICARD = config["picard"]
JAVA = config["java"]
BWA = config["bwa"]
SAMTOOLS = config["samtools"]
GATK = config["gatk"]
SAMBAMBA = config["sambamba"]
QUALIMAP = config["qualimap"]

REFERENCE_FASTA = config["hg38_fasta"]
INDEL_MILLS = config["indel_mills"]
INDEL_KNOWN = config["indel_known"]
DBSNP = config["dbsnp"]


rule all:
	input:
		expand([OUT_DIR + "/recaled_bams/{sample}.recaled.bam",
		        OUT_DIR + "/recaled_bams/{sample}.recaled.bai"], sample = SAMPLES.keys()),
		#expand([OUT_DIR + "/qualimap/{sample}/{sample}_report.pdf"], sample = SAMPLES.keys()),
		expand([OUT_DIR + "/gvcf_split/{sample}/{sample}_" + str(x) + ".g.vcf.gz" for x in range(1, 116)], sample=SAMPLES.keys()),



rule bam_to_fastq:
    input:
        bam = lambda wildcards: SAMPLES[wildcards.sample][1]
    output:
        r1 = temp(SCRATCH_DIR + "/fastq/{sample}/{sample}_r1.fastq.gz"),
        r2 = temp(SCRATCH_DIR + "/fastq/{sample}/{sample}_r2.fastq.gz"),
        unpaired = temp(SCRATCH_DIR + "/fastq/{sample}/{sample}_unpaired.fastq.gz"),
    params:
        memory = "30G", #If the job keeps crashing, specify 64G of memory allocation
    log:
        OUT_DIR + '/logs/bam_to_fastq/{sample}.out',
        OUT_DIR + '/logs/bam_to_fastq/{sample}.err'
    shell:
        "{JAVA} -Xmx{params.memory}"
        " -Djava.io.tmpdir={TEMP_DIR}"
        "    -jar {PICARD} SamToFastq "
        "    I={input.bam} "
        "    F={output.r1} "
        "    F2={output.r2} "
        "    FU={output.unpaired} "
        "    VALIDATION_STRINGENCY=SILENT"


rule bwa_align:
    input:
        r1 = SCRATCH_DIR + "/fastq/{sample}/{sample}_r1.fastq.gz",
        r2 = SCRATCH_DIR + "/fastq/{sample}/{sample}_r2.fastq.gz",
    output:
        bam = temp(SCRATCH_DIR + "/bwa_bam/{sample}.bam") 
    params:
        rg=lambda wildcards:"'@RG"+r'\t'+"ID:" + wildcards.sample +r'\t'+"SM:"+SAMPLES[wildcards.sample][0]+r'\t'+"LB:" + wildcards.sample +r'\t'+"PL:ILLUMINA'",
        threads = 16,
    log:
        OUT_DIR + '/logs/bwa_align/{sample}.out',
        OUT_DIR + '/logs/bwa_align/{sample}.err'
    shell:
        "{BWA} mem "
        "    -K 100000000"
        "    -Y "
        "    -t {params.threads}"
        "    -R {params.rg} "
        "    {REFERENCE_FASTA} "
        "    {input.r1} "
        "    {input.r2} "
        "    | {SAMTOOLS} view -1 -@ {params.threads} -bh -o {output.bam} -"


rule sort_and_fixtags:
    input:
        bam = SCRATCH_DIR + "/bwa_bam/{sample}.bam",
    output:
        bam = temp(SCRATCH_DIR + "/bwa_sorted/{sample}.sorted.bam"),
        bai = temp(SCRATCH_DIR + "/bwa_sorted/{sample}.sorted.bai")
    params:
        memory = "36G"
    priority: 1
    log:
        OUT_DIR + '/logs/sort_and_fixtags/{sample}.out',
        OUT_DIR + '/logs/sort_and_fixtags/{sample}.err'
    shell:
        "{GATK}"
        " --java-options \"-Dsamjdk.compression_level=5 -Djava.io.tmpdir={TEMP_DIR} -Xms{params.memory}\""
        " SortSam"
        " --INPUT {input.bam}"
        " --OUTPUT /dev/stdout"
        " --SORT_ORDER \"coordinate\""
        " --CREATE_INDEX false"
        " --CREATE_MD5_FILE false | "
        " {GATK}"
        " --java-options \"-Dsamjdk.compression_level=5 -Djava.io.tmpdir={TEMP_DIR} -Xms{params.memory}\""
        " SetNmMdAndUqTags"
        " --INPUT=/dev/stdin"
        " --OUTPUT={output.bam}"
        " --CREATE_INDEX=true"
        " --CREATE_MD5_FILE true"
        " --REFERENCE_SEQUENCE {REFERENCE_FASTA}"


rule mark_duplication:
    input:
        bam = SCRATCH_DIR + "/bwa_sorted/{sample}.sorted.bam",
        bai = SCRATCH_DIR + "/bwa_sorted/{sample}.sorted.bai",
    output:
        bam = temp(SCRATCH_DIR + "/mark_duplication/{sample}.markdup.bam"),
        metrics= OUT_DIR +"/qc/mark_duplicates/{sample}.metrics.txt"
    params:
        memory_min = "20G",
        memory_max = "40G"
    priority : 1
    log:
        OUT_DIR + '/logs/mark_duplication/{sample}.out',
        OUT_DIR + '/logs/mark_duplication/{sample}.err'
    shell:
        "{GATK}"
        " --java-options \"-Dsamjdk.compression_level=5 -Djava.io.tmpdir={TEMP_DIR} -Xms{params.memory_min} -Xmx{params.memory_max}\""
        " MarkDuplicates"
        " --INPUT={input.bam}"
        " --OUTPUT={output.bam}"
        " --METRICS_FILE={output.metrics}"
        " --VALIDATION_STRINGENCY=SILENT"
        " --OPTICAL_DUPLICATE_PIXEL_DISTANCE 2500"
        " --ASSUME_SORT_ORDER \"coordinate\""
        " --CREATE_MD5_FILE true"


rule base_recalibration:
    input:
        bam = SCRATCH_DIR + "/mark_duplication/{sample}.markdup.bam"
    output:
        recal_table = OUT_DIR + "/recal_tables/{sample}.recal.table",
    params:
        memory = "36G",
    priority : 1
    log:
        OUT_DIR + '/logs/base_recalibration/{sample}.out',
        OUT_DIR + '/logs/base_recalibration/{sample}.err'
    shell:
        "{GATK}"
        " --java-options \"-Dsamjdk.compression_level=5 -Djava.io.tmpdir={TEMP_DIR} -Xms{params.memory}\""
        " BaseRecalibrator "
        " -R {REFERENCE_FASTA} "
        " -I {input.bam} "
        " --use-original-qualities "
        " --known-sites {DBSNP} "
        " --known-sites {INDEL_MILLS} "
        " --known-sites {INDEL_KNOWN} "
        " -O {output.recal_table} " 

rule applyBQSR:
	input:
		bam = SCRATCH_DIR + "/mark_duplication/{sample}.markdup.bam",
		recal_table = OUT_DIR + "/recal_tables/{sample}.recal.table"
	output:
		bam = OUT_DIR + "/recaled_bams/{sample}.recaled.bam",
		bai = OUT_DIR + "/recaled_bams/{sample}.recaled.bai",
	params:
		memory = "36G",
	priority : 1
	log:
		OUT_DIR + '/logs/applyBQSR/{sample}.out',
		OUT_DIR + '/logs/applyBQSR/{sample}.err'
	shell:
		"{GATK} "
        " --java-options \"-Dsamjdk.compression_level=5 -Djava.io.tmpdir={TEMP_DIR} -Xms{params.memory}\""
		" ApplyBQSR "
		" -R {REFERENCE_FASTA} "
		" -I {input.bam} "	
		" -O {output.bam} "
		" -bqsr {input.recal_table} "
		" --static-quantized-quals 10 --static-quantized-quals 20 --static-quantized-quals 30 "
		" --add-output-sam-program-record "
		" --create-output-bam-md5 "
		" --use-original-qualities "


rule qualimap_bamqc:
	input :
		bam = OUT_DIR + "/recaled_bams/{sample}.recaled.bam"
	output :
		pdf = OUT_DIR + "/qualimap/{sample}/{sample}_report.pdf",
	params:
		memory = "12G",
		#cov = OUT_DIR + "/qualimap/{sample}/{sample}.cov",
		folder = OUT_DIR + "/qualimap/{sample}"
	benchmark:
		OUT_DIR + "/benchmarks/qualimap_bamqc/{sample}"
	log:
		OUT_DIR + '/logs/qualimap_bamqc/{sample}.out',
		OUT_DIR + '/logs/qualimap_bamqc/{sample}.err'
	shell:
		"{QUALIMAP} bamqc "
		" -bam {input.bam} "
		" --java-mem-size={params.memory} "
		#" --output-genome-coverage {params.cov} "
		" -outdir {params.folder} "
		" -outfile {output.pdf} "
		" -c"


rule haplotypecaller:
	input : 
		bam = OUT_DIR + "/recaled_bams/{sample}.recaled.bam"
	output :
		OUT_DIR + "/gvcf_split/{sample}/{sample}_{group}.g.vcf.gz" # this will be 'temp'ed later
	params:
		memory = "6G",
		intervalfile = "/projects/ps-gleesonlab5/user/sangmoon/1_mm_project/data/wgs_pipeline/interval_files/intervalfile_{group}.list",
	priority : 2	
	log:
		OUT_DIR +"/logs/haplotypecaller/{sample}/{sample}_{group}.out",                 
		OUT_DIR +"/logs/haplotypecaller/{sample}/{sample}_{group}.err"
	benchmark:
		OUT_DIR +"/benchmarks/haplotypecaller/{sample}/{sample}_{group}.txt"
	shell:
		"{GATK}"
		" --java-options \"-Dsamjdk.compression_level=5 -Djava.io.tmpdir={TEMP_DIR} -Xms{params.memory}\""
		" HaplotypeCaller "
		" -R {REFERENCE_FASTA} "
		" -I {input.bam} "
		" -L {params.intervalfile} "
		" -O {output} "
		" -contamination 0 "
		" -GQB 10 -GQB 20 -GQB 30 -GQB 40 -GQB 50 -GQB 60 -GQB 70 -GQB 80 -GQB 90"
		" -ERC GVCF "
		" -G StandardAnnotation -G AS_StandardAnnotation -G StandardHCAnnotation "
